#!/bin/bash

# TODO:
#   - Add log file.
#   - Add sync command to ensure writing is complete.
#   - Add a post-transfer file integrity check for $SNAPS_DIR?
#   - Figure out how to show file copy progress by byte rather than by whole file.

# =============================================================================
# This script should:
# 1. Create a dictionary of information about local snaps.
#       Start with seeds.
#       Add/overwrite from installed snaps, keeping highest revisions.
# 2. Create a dictionary of snaps and revisions in SNAPS_DIR
# 3. Determine which snaps should be copied.
# 4. Create assert files for all installed snaps that should be copied.
# 5. Copy each snap and its assert to SNAPS_DIR.
# 6. Remove extra snaps from SNAPS_DIR.
#
# The result in the offline folder should look like this:
#   snap1_23.assert
#   snap1_23.snap
#   snap2_157.assert
#   snap2_157.snap
#   ...
#
# *Assert files
#   It seems that snaps installed directly from the internet do not save an
#   assert file locally. Seeded snaps in /var/lib/snapd/seed do have assert
#   files, as well as snaps downloaded via $ snap download [snap]. But if one
#   wants to copy an online-installed snap to another machine, then an assert
#   file is needed.
#   
#   When using $ snap download [snap], if the snap is already present in the
#   PWD, then only the assert file will be downloaded. I don't know if the
#   command verifies the integrity of the snap file, though.
#   However, wasta-offline-snap-setup (like wasta-offline-setup) shouldn't be
#   dependent on an internet connection. Therefore, an assert file has to be
#   created for that snap from locally-available information.
#
# A snap's assert file has either 3 or 4 parts:
#   1. account-key (Canonical store info)
#   2. account (publisher info, if not published by Canonical)
#   3. snap-declaration (general snap info)
#   4. snap-revision (info specific to given revision number)
#
# =============================================================================

# Require root privileges.
# -----------------------------------------------------------------------------
if [ $(id -u) -ne 0 ]; then
    # Filling in for now for more elaborate handling.
    echo "This script needs to be run with root privileges. Exiting."
    exit 1
fi


# Set global variables
# -----------------------------------------------------------------------------
USAGE_TEXT="usage: $0 [OPTIONS] [/path/to/dest]"
HELP_TEXT="$USAGE_TEXT

This app copies local snaps and assert files to a given destination for
installation on other systems. If no options or args are passed, the
destination will be requested interactively.
    
    -h              Show this help text.
    -k [number]     Choose how many snap revisions to keep. Default is 2.
    /path/to/dest   Directory for storing offline snaps.
"

# Default number of snap revisions kept in offline folder.
# TODO: Change this to 2 after thorough testing of wasta-snap-manager.
MAX=3

# Evaluate options.
while getopts ":hk:" opt; do
    case $opt in
        h) # help requested
            echo "$HELP_TEXT"
            exit 0
            ;;
        k) # MAX num of kept snaps specified
            if [[ $OPTARG -ge 1 ]]; then
                MAX="$OPTARG"
            else
                echo "Error: At least 1 revision of each snap must be kept."
                exit 1
            fi
            ;;
        /?) # invalid option
            echo "$USAGE_TEXT"
            exit 1
    esac
done
shift $((OPTIND-1))
SNAPS_DIR="$1"

# System info
LOG_DATE=$(date +%F-%H-%M)
HOST=$(uname -n)

# Zenity defaults
ZTITLE="wasta [Offline] Snap Setup"
ZHEIGHT=200
ZWIDTH=500
ZICON=/usr/share/icons/hicolor/64x64/apps/wasta-offline.png
ZDEFAULTS=(--title="$ZTITLE" --height="$ZHEIGHT" --width="$ZWIDTH" --window-icon="$ZICON")

# Determine SNAPS_DIR.
#   If no arg passed, give initial prompt and then prompt for folder.
while [[ ! -w $SNAPS_DIR ]]; do
    zenity --question --no-wrap "${ZDEFAULTS[@]}" \
        --text="<b>Use wasta [Offline] Snap Setup to add your computer's
<u>local snap cache</u> to wasta [Offline]?</b>\n

<i>You will be prompted to <b>either</b>:</i>\n
  <b>* Select</b> an <b>existing</b> <i>'wasta-offline'</i>  folder <b>or</b>\n
  <b>* Create</b> (and then <b>Select</b>) a folder of your choice.\n" 2>/dev/null
    if [[ $? -gt 0 ]]; then
        # User didn't say yes: exit.
        exit 1
    fi

    text="Searching system for wasta-offline folder..."
    prog_opts="--progress --pulsate --auto-close --auto-kill --no-cancel"
    # Using SUDO_USER to try to limit the scope of the 'find' command below.
    #   Convoluted yet functional zenity subprocess inspired by this article:
    #   http://wiki.bash-hackers.org/zenity_--progress
    wo_list=$(
        sudo -u $SUDO_USER find / -name 'wasta-offline' -type d 2>/dev/null \
            | tee >(
            zenity ${prog_opts[@]} --text="$text" "${ZDEFAULTS[@]}" 2>/dev/null
            )
        )
    for d in ${wo_list[@]}; do
        loc_cache=$(find "$d" -name 'local-cache' -type d 2>/dev/null)
        if [[ $loc_cache =~ ^/media/.*$ ]]; then
            # Automatically accept 'wasta-offline' folder in /media/...
            START_FOLDER="$d"
            break
        elif [[ $loc_cache ]]; then
            # Accept other 'wasta-offlne' folder, but let one in /media/... overrule it.
            #   In case there are more than two qualifiers, the last one found wins.
            START_FOLDER="$d"
        else
            # No existing wasta-offline folder found.
            START_FOLDER=/home/"$SUDO_USER"
        fi
    done

    MSG+="

start folder: $START_FOLDER"
  
    FOLDER_SEL=$(
        zenity --file-selection --directory --filename="$START_FOLDER" \
        "${ZDEFAULTS[@]}" \
        --title="Select or Create a destination folder" 2>/dev/null
        )
    if [[ $? -gt 0 ]]; then
        # User clicked "Cancel". Exit.
        exit 1
    elif [[ -w $FOLDER_SEL ]]; then
        SNAPS_DIR="$FOLDER_SEL"

        MSG+="

wasta-offline snaps location: $SNAPS_DIR"
    else
        # Not likely to have selected a folder unwriteable by root, but just in case.
        zenity --error --no-wrap "${ZDEFAULTS[@]}" \
          --text="<b>Selected Folder:</b> $FOLDER_SEL\n
Files cannot be created in this folder.\n
Please choose again." 2>/dev/null
        if [[ $? -gt 0 ]]; then
            # User chose "Cancel". Exiting.
            exit 1
        fi
    fi
done

# Set log location.
LOG_DIR="$SNAPS_DIR/log/wasta-offline-snap-setup"
mkdir -p $LOG_DIR
LOG="$LOG_DIR/$LOG_DATE-$HOST.log"

# Need to be able to handle 2 types of SNAPS_DIRs:
#   1. "wasta-offline" folder -> Set SNAPS_DIR as wasta-offline/local-cache/snaps.
#   2. any other folder passed -> Set SNAPS_DIR as passed argument.
if [[ $SNAPS_DIR =~ ^.*wasta-offline/*$ ]]; then
    SNAPS_DIR="$SNAPS_DIR"/local-cache/snaps
    # Make sure SNAPS_DIR exists.
    mkdir -p "$SNAPS_DIR"
fi

# snapd API variables
#   docs: https://docs.ubuntu.com/core/en/reference/rest
SNAPD_API=http://localhost
SOCKET=/run/snapd.socket

# snapd directories
SNAPD=/var/lib/snapd
SEEDS="$SNAPD"/seed
SNAPS="$SNAPD"/snaps

# mktemp template reference
TEMPLATE="wo-snap.XXXX"


# Define functions.
# ---------------------------------------------------------------------------
# Create assert file of installed snap. These only get created if the
#   corresponding .snap file is copied to the SNAPS_DIR.
create_assert_file() {
    snap="$1"
    rev="$2"
    snap_id="$3"
    dest="$4"

    # Get account-key info of given snap.
    snap_key_info=$(snap known account-key account-id=canonical name=store)

    # Get snap-declaration info.
    snap_decl_info=$(snap known snap-declaration snap-id="$snap_id")

    # Get account info if non-Canonical snap.
    pub_id=$(echo "$snap_decl_info" | grep 'publisher-id:' \
        | tr -s ' ' | cut -d' ' -f2)

    # Canonical snaps' account ID is "canonical". Otherwise it's a long key string.
    if [[ $pub_id != 'canonical' ]]; then
        snap_acct_info=$(snap known account account-id="$pub_id")
    fi

    # Get snap revision info.
    snap_rev_info=$(snap known snap-revision snap-id="$snap_id" snap-revision="$rev")

    # Create assert file.
    outfile="$dest"/"${snap}_${rev}.assert"

    echo "$snap_key_info" > "$outfile"
    echo >> "$outfile"

    if [[ $pub_id != 'canonical' ]]; then
        echo "$snap_acct_info" >> "$outfile"
        echo >> "$outfile"
    fi

    echo "$snap_decl_info" >> "$outfile"
    echo >> "$outfile"

    echo "$snap_rev_info" >> "$outfile"
    }

# Exit script nicely by cleaning up.
script_exit() {
    ec="$1"
    pid_to_kill="$2"
    
    # Kill the passed process if still running.
    if [[ $pid_to_kill ]] && [[ $(ps --no-headers -p "$pid_to_kill") ]]; then
        kill "$pid_to_kill"
    fi
    
    # Remove temp files.
    rm -r /tmp/${TEMPLATE%.*}*
   
    # Remove snaps in $SNAPS_DIR that don't have asserts (due to incomplete copy).
    files_in_dest=$(find "$SNAPS_DIR" -type f)
    for f in ${files_in_dest[@]}; do
        if [[ $f =~ .*\.snap$ ]]; then
            if [[ ! -f ${f//.snap}.assert ]]; then
                rm $f
            fi
        fi
    done

    # TODO: Perform file integrity check for snaps in $SNAPS_DIR?
    
    exit "$ec"
    }


# Show progress of slow-moving subprocess using zenity dialog.
show_progress() {
    proc_pid="$1"
    data_src="$2"
    dest_dir="$3"
    info_txt="${@:4}"

    prog_opts="--progress --auto-close"
    while [[ $(ps --no-headers -p "$proc_pid") ]]; do
        ec=$(tail -n1 "$data_src" | cut -f1)
        prog=$(tail -n1 "$data_src" | cut -f2)
        snap=$(tail -n1 "$data_src" | cut -f3)
        rev=$(tail -n1 "$data_src" | cut -f4)
        
        if [[ $ec -gt 0 ]]; then
            script_exit "$ec" "$proc_pid"
        fi
        
        echo "$prog"
        echo "#$info_txt $snap..."
        sleep 0.2
    done | zenity ${prog_opts[@]} "${ZDEFAULTS[@]}" 2>/dev/null
    }


# 1. Find all installed and seeded snaps, plus other useful details.
# ---------------------------------------------------------------------------
echo "Listing installed and seeded snaps..."

# Get list of seeded snaps in /var/lib/snapd/seed
seed_list=$(find "$SEEDS"/snaps -name '*.snap' 2>/dev/null)

# Add these snap names to $snaps_local dictionary.
declare -A snaps_local
for i in ${seed_list[@]}; do
    filename="${i##*/}"
    filetitle="${filename//.*}"
    snap="${filetitle%_*}"
    rev="${filetitle##*_}"
    size=$(stat --printf="%s" "$i")
    # Add "S" after to flag the snap as "seeded" rather than "installed".
    snaps_local["$snap"]="$rev $size S"
done

# Get list of snaps currently installed.
#installed_list=$(snap list --all | grep -v Name)
installed_list=$(snap list | grep -v Name)

# Add these snap names to $snaps_local dictionary. Installed snaps will replace
#   seeded snaps of the same name. Installed snaps should always have an equal
#   or higher revision number than seeded snaps, so no problem.
while read -r line; do
    snap=$(echo "$line" | tr -s ' ' | cut -d' ' -f1)
    rev=$(echo "$line" | tr -s ' ' | cut -d' ' -f3)
    #pub=$(echo "$line" | tr -s ' ' | cut -d' ' -f5)
    #pub="${pub//✓}"
    fileloc=$SNAPS/${snap}_${rev}.snap
    size=$(stat --printf="%s" "$fileloc")
    # "I" refers to snap state "installed" as opposed to "seeded".
    #snaps_local["$snap"]="$rev $size I $pub"
    snaps_local["$snap"]="$rev $size I"
done <<< "$installed_list"


# 2. Create dictionary of snaps and top revision #s present in offline folder.
# ---------------------------------------------------------------------------
# Get offline snaps in $SNAPS_DIR.
available_list=$(find "$SNAPS_DIR"/ -name '*.snap')
# Build associative array of available snaps and revisions in SNAPS_DIR.
#   The revision numbers are space-delimited; e.g. ("[skype]"="54 57 ").
declare -A snaps_avail
for i in ${available_list[@]}; do
    name_rev=${i##*/}
    name_rev=${name_rev%.snap}
    rev=${name_rev##*_}
    name=${name_rev%_*}
    snaps_avail["$name"]+="$rev "
done

# Sort revisions listed for each snap, choose highest one.
declare -A snaps_top
for snap in ${!snaps_avail[@]}; do
    top=$(
        for r in ${snaps_avail[$snap]}; do
            echo $r
        done | sort -nr | head -1
        )
    snaps_top["$snap"]="$top"
done


# 3. Determine relevant snaps (and assert files) to copy over.
# ---------------------------------------------------------------------------
# Files in /var/lib/snapd/snaps are supposed to be 0600 root:root, even if some
#   are 0644 root:root (holdovers from old policy). The other option at
#   /var/lib/snapd/cache is even more restricted with the folder being 0700.
#   It looks like this script will need sudo privileges in the end.
#   https://forum.snapcraft.io/t/permissions-of-snap-files-in-var-lib-snapd-snaps/1462/3
echo "Preparing to copy newest snaps and assert files to $SNAPS_DIR."

# Determine which local snaps are eligible to be copied.
declare -A snaps_to_copy
for snap in ${!snaps_local[@]}; do
    data="${snaps_local[$snap]}"
    rem3="${data#* }"
    rem2="${rem3#* }"

    rev="${data%% *}"
    size="${rem3%% *}"
    state="${rem2% *}"

    # Check to see if local snap has a revision in SNAPS_DIR.
    if [[ ${snaps_avail[$snap]} ]]; then
        # If so, then check if installed revision is higher than available one.
        if [[ $rev -gt ${snaps_top[$snap]} ]]; then
            # If so, add snap to $snaps_to_copy.
            snaps_to_copy["$snap"]="$rev $size $state"
        fi
    else
        # If not, add snap to lists to be copied.
        snaps_to_copy["$snap"]="$rev $size $state"
    fi
done


# 4. Create asserts for installed snaps; store in /tmp folder
# ---------------------------------------------------------------------------
echo "Creating assert files for installed snaps..."

# Create dictionary of snaps and snap-ids.
snaps_addr=v2/snaps
snaps_count=$(snap list | grep -vE '^Name\s*Version.*' | grep -v disabled | wc -l)
json=$(curl --silent --unix-socket "$SOCKET" "$SNAPD_API"/"$snaps_addr")
names=($(echo "$json" | jq ".result[].name"))
ids=($(echo "$json" | jq ".result[].id"))
declare -A snap_ids
i=0
while [[ $i -lt $snaps_count ]]; do
    snap="${names[$i]}"
    snap="${snap#\"}" #}"
    snap="${snap%\"}" #}"
    
    snap_id="${ids[$i]}"
    snap_id="${snap_id#\"}" #}" # the last chars are to fix syntax highlighting in gedit
    snap_id="${snap_id%\"}" #}" # ditto
    snap_ids["$snap"]="$snap_id"
    ((i++))
done

# Send assert creation to the background & log output to tempfile.
tmp_asserts_dir=$(mktemp -d "$TEMPLATE" --tmpdir)
#TODO: The output to this tempfile should probably go to a log file instead.
tmp_asserts=$(mktemp "$TEMPLATE" --tmpdir)
total_ct="${#snaps_to_copy[@]}"
(
ct=0
for snap in ${!snaps_to_copy[@]}; do
    data="${snaps_to_copy[$snap]}"
    rem3="${data#* }"
    rem2="${rem3#* }"
    
    rev="${data%% *}"
    state="${rem2% *}"
    snap_id="${snap_ids[$snap]}"
    # Only snaps with [[ state == I ]] need an accompanying assert file.
    if [[ $state != 'I' ]]; then
        continue
    fi

    prog=$(($ct*100/$total_ct))
    echo "- creating assert file for $snap..."
    echo -e "0\t$prog\t$snap" >> "$tmp_asserts"
    create_assert_file "$snap" "$rev" "$snap_id" "$tmp_asserts_dir"
    ((ct += 1))
done
) &
ASSERT_PID=$!

# TODO: I'm not sure we need a progress window here. Assert creation goes
#   rather quickly now.
# Read tempfile to get data for progress dialog while ASSERT_PID exists.
text="Some assert files need to be created. Please be patient.\n\n \
Creating assert file for"
show_progress "$ASSERT_PID" "$tmp_asserts" "none" "$text"
# For some reason this doesn't kill the subprocess if included within the show_progress function.
ec=$?
if [[ $ec -gt 0 ]]; then
    script_exit "$ec" "$ASSERT_PID"
fi

# Calculate total size of all snaps to be copied for use in progress window.
#   We could try to include assert sizes in this calculation, but that's a lot
#   of work when you consider that each one is less than 6 KiB.
total_bytes_to_copy=0
for snap in ${!snaps_to_copy[@]}; do
    data="${snaps_to_copy[$snap]}"
    rem3="${data#* }"
    size="${rem3%% *}"
    ((total_bytes_to_copy += $size))
done

# 5. Copy eligible snaps and asserts, checking disk space before each one.
# ---------------------------------------------------------------------------
# Show progress dialog based on bytes copied.
tmp_copy=$(mktemp "$TEMPLATE" --tmpdir)
bytes_copied=0
(
# Copy each snap only if there is enough room on SNAPS_DIR disk.
for snap in ${!snaps_to_copy[@]}; do
    data="${snaps_to_copy[$snap]}"
    rem3="${data#* }"
    rem2="${rem3#* }"

    rev="${data%% *}"
    size="${rem3%% *}"
    state="${rem2% *}"
    
    # Get size of available space (in B) on SNAPS_DIR disk.
    avail=$(df -B1 --output=avail "$SNAPS_DIR" | tail -n1)
    # Only copy snap and assert if there's enough room.
    if [[ $avail -gt $size ]]; then
        prog=$(($bytes_copied*100/$total_bytes_to_copy))
        echo "- copying snap [& assert] for ${snap}_${rev} to $SNAPS_DIR..."
        echo -e "0\t$prog\t$snap\t$rev" >> "$tmp_copy"
        snap_rev="${snap}_${rev}"

        # Source folders for installed snaps.
        if [[ $state == 'I' ]]; then
            src_snaps="$SNAPS"
            src_asserts="$tmp_asserts_dir"
        # Source folders for seeded snaps.
        elif [[ $state == 'S' ]]; then
            src_snaps="$SEEDS"/snaps
            src_asserts="$SEEDS"/assertions
        else
            # Not really possible.
            echo "Snap source location not known. Exiting."
            echo "1" >> "$tmp_copy"
            script_exit 1
            exit 1
        fi

        # Copy snap and assert files to $SNAPS_DIR.
        cp "$src_snaps"/"$snap_rev.snap" "$SNAPS_DIR"/
        cp "$src_asserts"/"$snap_rev.assert" "$SNAPS_DIR"/
        chmod 777 "$SNAPS_DIR"/"$snap_rev"*
        ((bytes_copied += $size))
    else
        disk=$(df /media/nate/Nates16GB/wasta-offline | tail -n1 | tr -s ' ' | \
                cut -d ' ' -f1)
        text="Not enough room left on device $disk.\n\n \
Please clear up some space and try again or use a different disk."
        echo "$text"
        zenity --error "${ZDEFAULTS[@]}" --text="$text" 2>/dev/null
        echo "1" >> "$tmp_copy"
        script_exit 1
        exit 1
    fi
done
) &
COPY_PID=$!

# Read tempfile to get data for Zenity progress dialog while COPY_PID exists.
text="Copying snaps to:\n\n \
\t$SNAPS_DIR\n\n \
This may take some time, especially on a USB 2.0 device.\n\n \
Copying"
show_progress "$COPY_PID" "$tmp_copy" "$SNAPS_DIR" "$text"
ec=$?
if [[ $ec -gt 0 ]]; then
    script_exit "$ec" "$COPY_PID"
fi

#TODO: Do we even need to keep a record of snaps copied?
declare -A snaps_copied
# Apparently can't assign to array within the show_progress function above.
while read l; do
    name=$(echo "$l" | cut -f3)
    rev=$(echo "$l" | cut -f4)
    snaps_copied["$name"]="$rev"
done < "$tmp_copy"


# 6. Delete old revisions, keeping only the $MAX most recent ones.
# ---------------------------------------------------------------------------
# Get snaps in offline directory.
echo "Listing snaps in offline folder..."
available_list=$(find "$SNAPS_DIR"/ -name '*.snap')
# Build up-to-date dictionary of offline snaps and revisions in SNAPS_DIR.
#   The revision numbers are space-delimited; e.g. ("[skype]"="54 57 ").
declare -A snaps_offline
for a in ${available_list[@]}; do
    name_rev="${a##*/}"
    name_rev="${name_rev%.snap}"
    rev="${name_rev##*_}"
    name="${name_rev%_*}"
    snaps_offline["$name"]+="$rev "
done

# Sort revisions listed for each snap. Remove all but $MAX higest revisions.
echo "Removing old snap versions..."
# Create dictionary of snaps and revisions to be removed.
declare -A snaps_removed
for snap in ${!snaps_offline[@]}; do
    sorted=$(
        for r in ${snaps_offline[$snap]}; do
            echo "$r"
        done | sort -nr
        )
    count=1
    for rev in ${sorted[@]}; do
        if [[ $count -le $MAX ]]; then
            # Don't remove snap revision.
            ((count += 1))
        else
            # Select snap revision and assert file for removal.
            snaps_removed["$snap"]+="$rev "
        fi
    done
done

# TODO: I think this happens fast enough to not need a progress window. But
#   that can be reconsidered after more testing.
# Remove all snaps and asserts of given revision numbers.
for snap in ${!snaps_removed[@]}; do
    for rev in ${snaps_removed[$snap]}; do
        rm -f "$SNAPS_DIR"/"${snap}_${rev}.snap"
        rm -f "$SNAPS_DIR"/"${snap}_${rev}.assert"
    done
done
echo "Done."

script_exit 0
